BUILD:

docker build -t myapp:1.0 
Build an image from the Dockerfile in the current
directory and tag the image

docker images
List all images that are locally stored with the Docker
engine

docker rmi alpine:3.4
Delete an image from the local image store


SHIP:

docker pull alpine:3.4
Pull an image from a registry

docker tag alpine:3.4 myrepo/myalpine:3.4
Retag a local image with a new image name and tag

docker login my.registry.com:8000
Log in to a registry (the Docker Hub by default)

docker push myrepo/myalpine:3.4
Push an image to a registry


RUN:

docker run
--rm             remove container automatically after it exits
-it              connect the container to terminal
--name web       name the container
-p 5000:80       expose port 5000 externally and map to port 80
-v ~/dev:/code   create a host mapped volume inside the container
alpine:3.4       the image from which the container is instantiated
/bin/sh          the command to run inside the container

docker stop web
Stop a running container through SIGTERM

docker kill web
Stop a running container through SIGKILL

docker network create --subnet 10.1.0.0/24 --gateway 10.1.0.1 -d overlay mynet
Create an overlay network and specify a subnet

docker network ls
List the networks

docker ps
List the running containers

docker rm -f $(docker ps -aq)
Delete all running and stopped containers 

docker exec -it web bash
Create a new bash process inside the container and connect
it to the terminal

docker logs --tail 100 web
Print the last 100 lines of a containerâ€™s logs


EXTRAS and Different Versions :

docker pull image_name:tag
docker create --name container_name image_name:tag
docker commit -m "commit message" -a "author" container_id username/imagename:tag
docker exec -ti container_name "command.sh"
docker start container_name
docker stop container_name
docker logs -ft container_name
docker kill $(docker ps -q)














